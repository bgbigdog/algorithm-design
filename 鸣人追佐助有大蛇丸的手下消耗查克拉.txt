#include<iostream>
#include<queue>

using namespace std;

struct stt
{
	int row;
	int col;
	int chakela;
	int step;
};

int m, n;//m行，n列
char a[200][200];//从0行0列开始

int used[200][200][10];

struct stt start, target;

queue <struct stt> q;

int dr[4] = {0, 1, 0, -1};
int dc[4] = {-1, 0, 1, 0};

int bfs();
int canmoveto(struct stt u, int dire);
struct stt moveto(struct stt u, int dire);
void input();
void init();

int main()
{
	int num;
	
	input();
	init();
	num = bfs();
	cout << num << endl;
}

int bfs()
{
	int i;
	struct stt u, v;
	
	while(!q.empty())
	{
		//1.取出队首元素u
		u = q.front();
		q.pop();
		//2.扩展u
		for(i = 0; i < 4; i++)//0,1,2,3分别表示左上右下 
		{
			if(canmoveto(u, i) == 1)
			{
				v = moveto(u, i);
				if(a[v.row][v.col] == '+')
				{
					return(v.step);
				}
				q.push(v);
				used[v.row][v.col][v.chakela] = 1;
			}
		} 
	}
	return(-1);
}

int canmoveto(struct stt u, int dire)
{
	int r, c;
	bool flag;

	r = u.row + dr[dire];
	c = u.col + dc[dire];
	flag = 0;
	if(r >= 0 && r < m && c >= 0 && c < n)
	{
		flag = 1;
		if(a[r][c] == '#' && u.chakela == 0)
		{
			flag = 0;
		}
	}
	return(flag);
}

struct stt moveto(struct stt u, int dire)
{
	struct stt v;
	
	v.row = u.row + dr[dire];
	v.col = u.col + dc[dire];
	v.step = u.step + 1;
	v.chakela = u.chakela;
	if(a[v.row][v.col] == '#')
	{
		v.chakela--;
	}
	return(v);
}

void input()
{
	int i, j;
	int t;
	
	cin >> m >> n >> t;
	for(i = 0; i < m; i++)
	{
		for(j = 0; j < n; j++)
		{
			cin >> a[i][j];
			if(a[i][j] == '@')
			{
				start.row = i;
				start.col = j;
				start.chakela = t;
				start.step = 0;
			}
		}
	}
}

void init()
{
	used[start.row][start.col][start.chakela] = 1;
	q.push(start);
}
